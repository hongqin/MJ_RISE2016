# Version info: R 2.14.1, Biobase 2.15.3, GEOquery 2.23.2, limma 3.10.1
# R scripts generated  Mon Jan 11 22:28:24 EST 2016
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE47856", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
rm(list=ls())
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
#gset <- getGEO("GSE47856", GSEMatrix =TRUE)
#save.image("GSE47856.RData")
load("GSE47856.RData")
gset <- getGEO("GSE47856", GSEMatrix =TRUE)
save.image("GSE47856.RData")
rm(list=ls())
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
fvarLabels(gset) <- make.names(fvarLabels(gset))
fvarLabels(gset)
?make.names()
?gset
gset
str(gset)
gset@phenoData
str( gset@phenoData )
gset@phenoData@data
gset@phenoData@data[1:10]
str( gset@phenoData@data )
experimental_design = gset@phenoData@data
View(experimental_design)
gset@experimentData@samples
gset@phenoData@data
gset@phenoData@dimLabels
gset@phenoData@varMetadata
experimental_design[1,]
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
experimental_design[1,]
gset@phenoData@varMetadata
experimental_design[1,  "treatment_protocol_ch1"]
experimental_design[1,  "source_name_ch1"]
experimental_design[1:5,  "source_name_ch1"]
View(experimental_design)
experimental_design[1:5,  c("characteristic_ch1", "characteristic_ch1.2")]
experimental_design[1:5,  c("characteristics_ch1", "characteristic_ch1.2")]
experimental_design[1:5,  c("characteristics_ch1", "characteristics_ch1.2")]
# group names for all samples
sml <- c
experimental_design$characteristics_ch1
which(sml != "X")
?which
sml
sel <- which(sml != "X")
sml <- sml[sel]
sml
sel
gest[,1:2]
gset[ ,1:2]
gset[ , 3:5]
experimental_design[1:5,  "source_name_ch1"]
experimental_design[, "source_name_ch1"]
experimental_design[, "source_name_ch1"][5]
experimental_design[, "source_name_ch1"][1:5]
experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
unique( experimental_design$characteristics_ch1 )
grep("HeyA8", experimental_design$characteristics_ch1)
grep("HeyC2", experimental_design$characteristics_ch1)
unique( experimental_design$characteristics_ch1 )
gset$description
gset$description
sel = grep("HeyC2", experimental_design$characteristics_ch1)
gset = gset[ ,sel]
gset$description
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
View(ex)
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
fl <- as.factor(gset@phenoData@data$characteristics_ch1.2)
f1
fl
f1?model.matrix
? model.matrix()
design <- model.matrix(~ description + 0, gset)
View(design)
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
[,  c("characteristics_ch1", "characteristics_ch1.2")]
fl <- as.factor(gset@phenoData@data$characteristics_ch1.2)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
fl <- as.factor(gset@phenoData@data$characteristics_ch1.2)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
design
description
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
str(fit)
head(fit)
fit
?contrasts.fit
cbind(First3=c(1,0),Last3=c(0,1),"Last3-First3"=c(-1,1))
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
design
cont.matrix <- makeContrasts( 'treatment: Cisplatin'-'treatment: none', levels=design)
?makeContrasts
cont.matrix <- makeContrasts( 'treatment: Cisplatin'-'treatment: none')
cont.matrix <- makeContrasts( 'treatment: Cisplatin'-'treatment: none', levels=design)
help(make.names)
fl
cont.matrix <- makeContrasts( make.names('treatment: Cisplatin'-'treatment: none', levels=fl)
)
levels()
levels
fl
make.names(fl)
fl
fl <- as.factor( make.names(gset@phenoData@data$characteristics_ch1.2) )
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
fl
cont.matrix <- makeContrasts( treatment..none ~ treatment..Cisplatin, levels=fl)
treatment..none
?makeContrasts
fl
unique(fl)
fl <- as.factor( make.names(gset@phenoData@data$characteristics_ch1.2) )
fl
fl <- make.names(gset@phenoData@data$characteristics_ch1.2)
fl
newnames <- make.names(gset@phenoData@data$characteristics_ch1.2)
nnewnames
newnames
treatments <- make.names(gset@phenoData@data$characteristics_ch1.2)
unique(treatments)
seq(A:C)
A:C
LETTERS[1:5]
LETTERS[1:length(fl.names)]
fl.names = unique(treatments)
LETTERS[1:length(fl.names)]
factors( LETTERS[1:length(fl.names)])
as.factor( LETTERS[1:length(fl.names)])
fl.names = unique(treatments)
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
fl
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
tT[1:10,]
View(tT)
source('~/.active-rstudio-document', echo=TRUE)
View(tT)
apply(ex,2, sum)
?apply
x
ex
source('~/.active-rstudio-document', echo=TRUE)
apply(ex,2, sum)
sums = apply(ex,2, sum)
sums / max(sums)
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# gset <- getGEO("GSE47856", GSEMatrix =TRUE)
# save.image("GSE47856.RData")
# rm(list=ls())
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# study the meta data
experimental_design = gset@phenoData@data
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
unique( experimental_design$characteristics_ch1 )
# study the meta data
experimental_design = gset@phenoData@data
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
unique( experimental_design$characteristics_ch1 )
sel = grep("HeyC2", experimental_design$characteristics_ch1)
gset = gset[ ,sel]
ex <- exprs(gset)
View(ex)
histo(ex[,1])
hist(ex[,1])
hist(log2[ex,1]))
hist(log2(ex[,1]))
boxplot(ex)
medians = apply(ex, 2, median)
medians
means = apply(ex, 2, mean)
means
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
ex = log2(ex)
summary(ex)
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
treatments <- make.names(gset@phenoData@data$characteristics_ch1.2)
fl.names = unique(treatments)
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
View(tT)
?topTable
