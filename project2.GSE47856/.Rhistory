gset@phenoData
gset@phenoData
gset$phenoData
gset@phenoData@data
gset@phenoData@data
rm(list=ls())
library(Biobase)
library(GEOquery)
library(limma)
load("GSE47856.RData")
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
load("GSE32719.RData")
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
idx
annotation(gset)
attr(gset)
attr(gset, 'names')
gset[[1]]
fvarLabels(gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset@phenoData@data
phenotData(gset)
pData(gset)
experimental_design = gset@phenoData@data
View(experimental_design)
gset@phenoData@varMetadata
experimental_design
experimental_design[1:10,  c("title")]
unique( experimental_design$characteristics_ch1 )
unique( experimental_design$title )
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
ls()
list.files()
?save
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
save(gset, file = "GSE32719_gset.RData")
rm(gset)
load("GSE32719_gset.RData")
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
load("GSE32719_gset.RData")
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset
load("GSE32719_gset.RData")
# make proper column names to match toptable
#fvarLabels(gset) <- make.names(fvarLabels(gset))
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
rm(list=ls())
str(gset)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
load("GSE32719_gset.RData")
# make proper column names to match toptable
#fvarLabels(gset) <- make.names(fvarLabels(gset))
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
gset <- getGEO(filename=system.file("GSE32719_family.soft.gz",package="GEOquery"))
?getGEO
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(filename="GSE32719_family.soft.gz")
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
gset@header
gset@gsms
x = gset@gsms
x[[1]]
x[[1]]
str(x)
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
experimental_design = gset@phenoData@data
gset@phenoData
install.packages(c("nlme", "Rcpp", "rJava"))
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
experimental_design = gset@phenoData@data
experimental_design = gset@phenoData
gset@phenoData
gset@phenoData@data
phenoData(gset)
str(gset)
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO(filename="GSE32719_family.soft.gz")
setwd("~/github/MJ_RISE2016/project2.GSE47856")
load("GSE47856.RData")
experimental_design = gset@phenoData@data
gset@phenoData@data
experimental_design = gset@phenoData@data
#   Differential expression analysis with limma
rm(list=ls())
setwd("~/github/MJ_RISE2016/project2.GSE47856")
library(Biobase)
library(GEOquery)
library(limma)
# gset <- getGEO("GSE47856", GSEMatrix =TRUE)
# save.image("GSE47856.RData")
# rm(list=ls())
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# study the meta data
experimental_design = gset@phenoData@data
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
unique( experimental_design$characteristics_ch1 )
sel = grep("HeyC2", experimental_design$characteristics_ch1)
gset = gset[ ,sel]
ex <- exprs(gset)
hist(ex[,1])
hist(log2(ex[,1]))
boxplot(ex)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
# if (LogC) { ex[which(ex <= 0)] <- NaN
# exprs(gset) <- log2(ex) }
# ex = log2(ex)
head(ex)
sums = apply(ex,2, sum)
sums / max(sums)
medians = apply(ex, 2, median)
medians
means = apply(ex, 2, mean)
means
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
treatments <- make.names(gset@phenoData@data$characteristics_ch1.2)
fl.names = unique(treatments)
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
?eBayes
treatments
fl.names
fl
class(tT)
tT
View(tT)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
View(tT)
fl
cont.matrix
fl
design
fl
fl.names
treatments
fl.names = unique(treatments)
fl.names
fl
names(fl) = fl.names
fl
fl[treatments]
treatments2 = fl[treatments]
treatments2
design <- model.matrix(~ description + 0, gset)
design
treatments2 = fl[treatments]
gset$description <- treatments2
gset$description
design <- model.matrix(~ description + 0, gset)
design
design
colnames(design) <- levels(fl)
design
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
View(cont.matrix)
cont.matrix
fit2 <- contrasts.fit(fit, cont.matrix)
fit2
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
View(tT)
tTall <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
View(tTall)
annotation(gset)
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
View(ncbifd)
head(ncbifd)
head(ncbifd[,1:5])
ncbifd$ID == 7914270
ncbifd[ ncbifd$ID == 7914270, ]
unique( experimental_design$characteristics_ch1 )
str(experimental_design$characteristics_ch1 )
cell_lines = as.character( unique( experimental_design$characteristics_ch1 ) )
str(cell_lines)
grep("HeyC2", experimental_design$characteristics_ch1)
cell_lines
experimental_design$characteristics_ch1
cell_lines[5]
sel = grep(cell_lines[5], experimental_design$characteristics_ch1)
gset = gset[ ,sel]
sel = grep(cell_lines[5], experimental_design$characteristics_ch1)
sel
load("GSE47856.RData")
sel = grep(cell_lines[5], experimental_design$characteristics_ch1)
gset = gset[ ,sel]
load("GSE47856.RData")
setwd("~/github/MJ_RISE2016/project2.GSE47856")
#   Differential expression analysis with limma
# rm(list=ls())
setwd("~/github/MJ_RISE2016/project2.GSE47856")
library(Biobase)
library(GEOquery)
library(limma)
#   Differential expression analysis with limma
# rm(list=ls())
setwd("~/github/MJ_RISE2016/project2.GSE47856")
# gset <- getGEO("GSE47856", GSEMatrix =TRUE)
# save.image("GSE47856.RData")
# rm(list=ls())
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# study the meta data
experimental_design = gset@phenoData@data
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
cell_lines = as.character( unique( experimental_design$characteristics_ch1 ) )
# sel = grep("HeyC2", experimental_design$characteristics_ch1)
sel = grep(cell_lines[5], experimental_design$characteristics_ch1)
gset = gset[ ,sel]
ex <- exprs(gset)
hist(ex[,1])
hist(log2(ex[,1]))
boxplot(ex)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
# if (LogC) { ex[which(ex <= 0)] <- NaN
# exprs(gset) <- log2(ex) }
# ex = log2(ex)
head(ex)
sums = apply(ex,2, sum)
sums / max(sums)
medians = apply(ex, 2, median)
medians
means = apply(ex, 2, mean)
means
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
treatments <- make.names(gset@phenoData@data$characteristics_ch1.2)
fl.names = unique(treatments)
fl.names
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
fl
#convert treatment into letters
treatments2 = fl[treatments]
treatments2
gset$description <- treatments2
design <- model.matrix(~ description + 0, gset)
design
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
cont.matrix
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tTall <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
View(tTall)
str(fit)
str(fit2)
str(tT)
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
tT[tT$ID ==7914270 , ]
ncbifd[ ncbifd$ID == 7914270, ]
tT$Gene.symbol = ncbifd[ match(tT$ID, ncbifd$ID) , "Gene.symbol" ]
tTall$Gene.symbol = ncbifd[ match(tTall$ID, ncbifd$ID) , "Gene.symbol" ]
write.table(tT$Gene.symbol, "select1percent.csv", row.names = FALSE)
write.table(tTall$Gene.symbol, "all_genes.csv", row.names = FALSE)
View(tTall)
write.table(tT$Gene.symbol, "select1percent.csv", row.names = FALSE)
write.table(tTall$Gene.symbol, "all_genes.csv", row.names = FALSE)
write.table(tTall$Gene.symbol, "all_genes.csv", row.names = FALSE, quote=F, col.names = F)
write.table(tT$Gene.symbol, "select1percent.csv", row.names = FALSE, quote=F, col.names=F)
View(tT)
write.table(tT$Gene.symbol[tT$t>0], "select1percentUP.csv", row.names = FALSE, quote=F, col.names=F)
write.table(tT$Gene.symbol[tT$t<0], "select1percentDown.csv", row.names = FALSE, quote=F, col.names=F)
cell_lines[5]
experimental_design$characteristics_ch1
source('~/.active-rstudio-document', echo=TRUE)
warnings()
#   Differential expression analysis with limma
# rm(list=ls())
setwd("~/github/MJ_RISE2016/project2.GSE47856")
library(Biobase)
library(GEOquery)
library(limma)
# gset <- getGEO("GSE47856", GSEMatrix =TRUE)
# save.image("GSE47856.RData")
# rm(list=ls())
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# study the meta data
experimental_design = gset@phenoData@data
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
cell_lines = as.character( unique( experimental_design$characteristics_ch1 ) )
# sel = grep("HeyC2", experimental_design$characteristics_ch1)
selected_cell_line = cell_lines[5]
sel = grep(selected_cell_line, experimental_design$characteristics_ch1)
gset = gset[ ,sel]
ex <- exprs(gset)
hist(ex[,1])
hist(log2(ex[,1]))
boxplot(ex)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
# if (LogC) { ex[which(ex <= 0)] <- NaN
# exprs(gset) <- log2(ex) }
# ex = log2(ex)
head(ex)
sums = apply(ex,2, sum)
sums / max(sums)
medians = apply(ex, 2, median)
medians
means = apply(ex, 2, mean)
means
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
treatments <- make.names(gset@phenoData@data$characteristics_ch1.2)
fl.names = unique(treatments)
fl.names
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
fl
#convert treatment into letters
treatments2 = fl[treatments]
treatments2
gset$description <- treatments2
design <- model.matrix(~ description + 0, gset)
design
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
cont.matrix
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tTall <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
str(fit)
str(fit2)
str(tT)
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
tT[tT$ID ==7914270 , ]
ncbifd[ ncbifd$ID == 7914270, ]
tT$Gene.symbol = ncbifd[ match(tT$ID, ncbifd$ID) , "Gene.symbol" ]
tTall$Gene.symbol = ncbifd[ match(tTall$ID, ncbifd$ID) , "Gene.symbol" ]
write.table(tT$Gene.symbol[tT$t>0], "select1percentUP.csv", row.names = FALSE, quote=F, col.names=F)
write.table(tT$Gene.symbol[tT$t<0], "select1percentDown.csv", row.names = FALSE, quote=F, col.names=F)
write.table(tTall$Gene.symbol, "all_genes.csv", row.names = FALSE, quote=F, col.names = F)
paste("select1percentUP", selected_cell_line, "csv", sep='.')
write.table(tT$Gene.symbol[tT$t>0], paste("select1percentUP", selected_cell_line, "csv", sep='.'), row.names = FALSE, quote=F, col.names=F)
?gsub
tag = gsub( "cell line: "", "", selected_cell_line)
gsub( "cell line: ", "", selected_cell_line)
tag = gsub( "cell line: ", "", selected_cell_line)
write.table(tT$Gene.symbol[tT$t>0], paste("select1percentUP", tag, "csv", sep='.'), row.names = FALSE, quote=F, col.names=F)
write.table(tTall$Gene.symbol, "all_genes.csv", row.names = FALSE, quote=F, col.names = F)
tag = gsub( "cell line: ", "", selected_cell_line)
write.table(tT$Gene.symbol[tT$t>0], paste("select1percentUP", tag, "csv", sep='.'), row.names = FALSE, quote=F, col.names=F)
write.table(tTall$Gene.symbol, "all_genes.csv", row.names = FALSE, quote=F, col.names = F)
tag = gsub( "cell line: ", "", selected_cell_line)
write.table(tT$Gene.symbol[tT$t>0], paste("select1percentUP", tag, "csv", sep='.'), row.names = FALSE, quote=F, col.names=F)
write.table(tT$Gene.symbol[tT$t<0], paste("select1percentDown", tag, "csv", sep="."), row.names = FALSE, quote=F, col.names=F)
write.table(tTall$Gene.symbol, "all_genes.csv", row.names = FALSE, quote=F, col.names = F)
source('~/.active-rstudio-document', echo=TRUE)
cell_lines
source('~/.active-rstudio-document', echo=TRUE)
View(ex)
source('~/.active-rstudio-document', echo=TRUE)
cell_lines
source('~/.active-rstudio-document', echo=TRUE)
cell_lines
source('~/.active-rstudio-document', echo=TRUE)
View(ex)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(ex)
grep(selected_cell_line, experimental_design$characteristics_ch1)
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
treatments <- make.names(gset@phenoData@data$characteristics_ch1.2)
fl.names = unique(treatments)
fl.names
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
fl
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
design <- model.matrix(~ description + 0, gset)
design
treatments2
gset$description <- treatments2
design <- model.matrix(~ description + 0, gset)
design
cont.matrix
? makeContrasts
makeContrasts(B-A,C-B,C-A,levels=c("A","B","C"))
?lmFit
eBayes
? eBayes
