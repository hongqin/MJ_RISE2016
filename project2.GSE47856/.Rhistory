tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=5E5
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E5
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
# Cancer mutation: A simple simulation exercise for BIO125
Basic parameters
```{r}
CellTypes = c(0,1,2)
```
*CellTypes*: 0 for wildtype, 1 for mutant, and 2 for cancer cells.
```{r}
TotalCells = 1E3
```
*TotalCells* means the number of cells, including wildtype, mutant, and cancer cells.
```{r}
CurrentCells = seq(0, TotalCells)
```
*CurrentCells* represent the current number and type of cells.
```{r}
Generations = c(1E3, 1E4, 1E5, 1E6, 1E7, 1E8)
```
*Generations* represent how many times cells with replicate.
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1+2
2^12
log2(16)
x = seq(1:10)
x
y = x + 2
y
plot( y ~ x)
1+2
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE2627", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL2022", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
sml <- c("G1","G1","G0","G0");
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","CLONE_ID","SPOT_ID"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE2627", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL2022", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
sml <- c("G1","G1","G0","G0")
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("TR","CTL")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE2627", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
library(Biobase)
library(GEOquery)
library(limma)
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE2627", GSEMatrix =TRUE)
save.image("GSE2627.RData")
if (length(gset) > 1) idx <- grep("GPL2022", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
load("GSE2627.RData")
if (length(gset) > 1) idx <- grep("GPL2022", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
#gset <- getGEO("GSE2627", GSEMatrix =TRUE)
#save.image("GSE2627.RData")
load("GSE2627.RData")
if (length(gset) > 1) idx <- grep("GPL2022", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# gset@phenoData@varMetadata  #this is empty
experimental_design = gset@phenoData@data
experimental_design
experimental_design[, "source_name_ch1"]
# experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
# unique( experimental_design$characteristics_ch1 )
ex <- exprs(gset)
mat = matrix( seq(1,length(ex[1,])), nrow=length(ex[1,])/2, ncol= 2 );
layout(mat);
for(i in 1:length(ex[1,]) ) {
hist(ex[,i], main=experimental_design$source_name_ch1[i])
}
layout(1)
boxplot(ex)
varMetadata(gset)
varMetadata(gset)$channel
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
par(mfrow=c(2,2))
for(i in 1:length(ex[1,]) ) {
hist(ex[,i], main=experimental_design$source_name_ch1[i])
}
layout(1)
boxplot(ex)
par(mfrow=c(1,1))
boxplot(ex)
gset@phenoData@data
gset@phenoData@data[,  c("source_name_ch1")]
gset@phenoData@data
gset@phenoData@data[,  c("source_name_ch1")]
gset@phenoData@data$source_name_ch1
treatments <- make.names(gset@phenoData@data$source_name_ch1)
fl.names = unique(treatments)
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
fl
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
View(tT)
?topTable
View(tT)
?fit2
str(fit2)
annotation(gset)
meta(gset)
Meta(gset)
str(tT)
?topTable
tT2 <- topTable(fit2, adjust="fdr", sort.by="B", number=NA)
tT2 <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
fit$coefficients
str( fit$coefficients )
fit$p.value
fit$P.value
fit[1,]
summary(ex)
str(ex)
str(gset)
save.image("GSE32719.RData")
ls()
list.files()
get.wd()
get.pwd()
getwd()
setwd("~/github/FL_HHMI15/project1.GSE32719")
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
save.image("GSE32719.RData")
list.files()
varMetadata(gset)
str(gset)
pData(gset)
phenoData(gset)
phenoData(gset)
gset@phenoData
gset@phenoData
gset$phenoData
gset@phenoData@data
gset@phenoData@data
rm(list=ls())
library(Biobase)
library(GEOquery)
library(limma)
load("GSE47856.RData")
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
load("GSE32719.RData")
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
idx
annotation(gset)
attr(gset)
attr(gset, 'names')
gset[[1]]
fvarLabels(gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset@phenoData@data
phenotData(gset)
pData(gset)
experimental_design = gset@phenoData@data
View(experimental_design)
gset@phenoData@varMetadata
experimental_design
experimental_design[1:10,  c("title")]
unique( experimental_design$characteristics_ch1 )
unique( experimental_design$title )
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
ls()
list.files()
?save
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
save(gset, file = "GSE32719_gset.RData")
rm(gset)
load("GSE32719_gset.RData")
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
load("GSE32719_gset.RData")
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset
load("GSE32719_gset.RData")
# make proper column names to match toptable
#fvarLabels(gset) <- make.names(fvarLabels(gset))
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
rm(list=ls())
str(gset)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
load("GSE32719_gset.RData")
# make proper column names to match toptable
#fvarLabels(gset) <- make.names(fvarLabels(gset))
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
gset <- getGEO(filename=system.file("GSE32719_family.soft.gz",package="GEOquery"))
?getGEO
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(filename="GSE32719_family.soft.gz")
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
gset@header
gset@gsms
x = gset@gsms
x[[1]]
x[[1]]
str(x)
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
experimental_design = gset@phenoData@data
gset@phenoData
install.packages(c("nlme", "Rcpp", "rJava"))
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
experimental_design = gset@phenoData@data
experimental_design = gset@phenoData
gset@phenoData
gset@phenoData@data
phenoData(gset)
str(gset)
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO(filename="GSE32719_family.soft.gz")
setwd("~/github/MJ_RISE2016/project2.GSE47856")
load("GSE47856.RData")
experimental_design = gset@phenoData@data
gset@phenoData@data
experimental_design = gset@phenoData@data
#   Differential expression analysis with limma
rm(list=ls())
setwd("~/github/MJ_RISE2016/project2.GSE47856")
library(Biobase)
library(GEOquery)
library(limma)
# gset <- getGEO("GSE47856", GSEMatrix =TRUE)
# save.image("GSE47856.RData")
# rm(list=ls())
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# study the meta data
experimental_design = gset@phenoData@data
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
unique( experimental_design$characteristics_ch1 )
sel = grep("HeyC2", experimental_design$characteristics_ch1)
gset = gset[ ,sel]
ex <- exprs(gset)
hist(ex[,1])
hist(log2(ex[,1]))
boxplot(ex)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
# if (LogC) { ex[which(ex <= 0)] <- NaN
# exprs(gset) <- log2(ex) }
# ex = log2(ex)
head(ex)
sums = apply(ex,2, sum)
sums / max(sums)
medians = apply(ex, 2, median)
medians
means = apply(ex, 2, mean)
means
gset@phenoData@data[,  c("characteristics_ch1", "characteristics_ch1.2")]
gset@phenoData@data$characteristics_ch1.2
treatments <- make.names(gset@phenoData@data$characteristics_ch1.2)
fl.names = unique(treatments)
fl = as.factor( LETTERS[1:length(fl.names)])
names(fl) = fl.names
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
?eBayes
treatments
fl.names
fl
class(tT)
tT
View(tT)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
View(tT)
fl
cont.matrix
fl
design
fl
fl.names
treatments
fl.names = unique(treatments)
fl.names
fl
names(fl) = fl.names
fl
fl[treatments]
treatments2 = fl[treatments]
treatments2
design <- model.matrix(~ description + 0, gset)
design
treatments2 = fl[treatments]
gset$description <- treatments2
gset$description
design <- model.matrix(~ description + 0, gset)
design
design
colnames(design) <- levels(fl)
design
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts( A-B, levels=fl)
View(cont.matrix)
cont.matrix
fit2 <- contrasts.fit(fit, cont.matrix)
fit2
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=50)
View(tT)
tTall <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
View(tTall)
annotation(gset)
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
View(ncbifd)
head(ncbifd)
head(ncbifd[,1:5])
ncbifd$ID == 7914270
ncbifd[ ncbifd$ID == 7914270, ]
unique( experimental_design$characteristics_ch1 )
str(experimental_design$characteristics_ch1 )
cell_lines = as.character( unique( experimental_design$characteristics_ch1 ) )
str(cell_lines)
grep("HeyC2", experimental_design$characteristics_ch1)
cell_lines
experimental_design$characteristics_ch1
cell_lines[5]
sel = grep(cell_lines[5], experimental_design$characteristics_ch1)
gset = gset[ ,sel]
sel = grep(cell_lines[5], experimental_design$characteristics_ch1)
sel
load("GSE47856.RData")
sel = grep(cell_lines[5], experimental_design$characteristics_ch1)
gset = gset[ ,sel]
load("GSE47856.RData")
